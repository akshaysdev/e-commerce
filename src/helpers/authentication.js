const jwt = require('jsonwebtoken');
const { userType } = require('../constants');

/**
 * It returns an object with a subject and html property. The subject is the subject of the email and
 * the html is the content of the email
 * @param userId - The user's ID
 * @param token - The token that was generated by the JWT library.
 * @returns An object with a subject and html property.
 */
const verificationEmailContent = (userId, token) => {
  return {
    subject: `Verify Email`,
    html: `Please verify your email by clicking the link below:<br/> <a href="${process.env.CLIENT_URL}/api/v1/auth/verify/${userId}/${token}">Verify</a><br/>Thanks, <br/>E-Commerce`,
  };
};

/**
 * It checks if the request has a token in the header, if it doesn't, it returns a 401 error, if it
 * does, it verifies the token and if it's valid, it adds the decoded user to the request object and
 * calls the next middleware
 * @param req - The request object.
 * @param res - The response object.
 * @param next - This is a callback function that is called when the middleware is complete.
 * @returns A function that takes in a request, response, and next.
 */
const verifyAuthentication = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) {
    return res.status(401).json({ status: false, message: 'Unauthenticated' });
  }

  jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, decoded) => {
    if (err) {
      return res.status(401).json({ status: false, message: 'Session expired' });
    }
    req.user = decoded.user;
    next();
  });
};

/**
 * If the user is a buyer, then allow them to continue, otherwise, return an error
 * @param req - The request object.
 * @param res - The response object.
 * @param next - This is a callback function that is called when the middleware is complete.
 * @returns A function that takes in 3 parameters: req, res, and next.
 */
const verifyBuyerAuthorization = (req, res, next) => {
  if (req.user.type === userType.BUYER) {
    next();
  } else {
    return res.status(401).json({ status: false, message: 'Unauthorized' });
  }
};

/**
 * If the user is a seller, then allow them to continue, otherwise return an error
 * @param req - The request object.
 * @param res - The response object.
 * @param next - This is a callback function that is called when the middleware is complete.
 * @returns A function that takes in 3 parameters: req, res, and next.
 */
const verifySellerAuthorization = (req, res, next) => {
  if (req.user.type === userType.SELLER) {
    next();
  } else {
    return res.status(401).json({ status: false, message: 'Unauthorized' });
  }
};

/**
 * If the user is a delivery partner, then allow the request to proceed
 * @param req - The request object.
 * @param res - The response object.
 * @param next - This is a callback function that is called when the middleware is complete.
 * @returns A function that takes in 3 parameters: req, res, next.
 */
const verifyDeliveryPartnerAuthorization = (req, res, next) => {
  if (req.user.type === userType.DELIVERY_PARTNER) {
    next();
  } else {
    return res.status(401).json({ status: false, message: 'Unauthorized' });
  }
};

module.exports = {
  verificationEmailContent,
  verifyAuthentication,
  verifyBuyerAuthorization,
  verifySellerAuthorization,
  verifyDeliveryPartnerAuthorization,
};
